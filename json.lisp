(in-package :utils.json)

(setf *parsed-true-value* :true)
(setf *parsed-false-value* :false)
(setf *parsed-null-value* :null)

(defun json-pretty (json &optional (stream *standard-output*))
  "Print JSON to STREAM, indenting and inserting newlines, so it's readable by human beings"
  (let ((indent-size 2)
        (indent-level 0))
    (labels ((indent ()
               (with-output-to-string (stream)
                 (dotimes (_ (* indent-size indent-level))
                   (write-char #\space stream))))
             (echo (val)
               (cond
                 ((eq :null val) (format stream "null"))
                 ((eq :true val) (format stream "true"))
                 ((eq :false val) (format stream "false"))
                 ((listp val) (if (eq (car val) :obj)
                                  (echo-obj val)
                                  (echo-arr val)))
                 ((atom val) (format stream "~s" val))
                 (t nil)))
             (echo-obj (json-obj)
               (let ((pairs (cdr json-obj)))
                 (if (null pairs)
                     (format stream "{}")
                     (progn
                       (incf indent-level)
                       (format stream "{~&")
                       (do* ((index 0 (1+ index))
                             (pair (nth index pairs) (nth index pairs))
                             (key (car pair) (car pair))
                             (val (cdr pair) (cdr pair))
                             (is-last (= index (- (length pairs) 1))
                                      (= index (- (length pairs) 1))))
                            ((null pair))
                         (format stream "~a~s: " (indent) key)
                         (echo val)
                         (unless is-last
                           (format stream ","))
                         (format stream "~&"))
                       (decf indent-level)
                       (format stream "~a}" (indent))))))
             (echo-arr (json-arr)
               (if (null json-arr)
                   (format stream "[]")
                   (progn
                     (incf indent-level)
                     (format stream "[~&")
                     (do* ((index 0 (1+ index))
                           (item (nth index json-arr) (nth index json-arr))
                           (is-last (= index (- (length json-arr) 1))
                                    (= index (- (length json-arr) 1))))
                          ((null item))
                       (format stream "~a" (indent))
                       (echo item)
                       (unless is-last
                         (format stream ","))
                       (format stream "~&"))
                     (decf indent-level)
                     (format stream "~a]" (indent))))))
      (echo json))))
